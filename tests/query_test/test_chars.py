# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import pytest

from tests.common.impala_test_suite import ImpalaTestSuite
from tests.common.test_dimensions import create_exec_option_dimension
from tests.util.filesystem_utils import get_fs_path

class TestStringQueries(ImpalaTestSuite):
  @classmethod
  def get_workload(cls):
    return 'functional-query'

  @classmethod
  def add_test_dimensions(cls):
    super(TestStringQueries, cls).add_test_dimensions()
    cls.ImpalaTestMatrix.add_dimension(
      create_exec_option_dimension(disable_codegen_options=[False, True]))
    cls.ImpalaTestMatrix.add_constraint(lambda v:\
        v.get_value('table_format').file_format in ['text'] and
        v.get_value('table_format').compression_codec in ['none'])

  def test_chars(self, vector):
    self.run_test_case('QueryTest/chars', vector)

  def test_chars_tmp_tables(self, vector, unique_database):
    # Tests that create temporary tables and require a unique database.
    self.run_test_case('QueryTest/chars-tmp-tables', vector, unique_database)

class TestCharFormats(ImpalaTestSuite):
  @classmethod
  def get_workload(cls):
    return 'functional-query'

  def setup_method(self, method):
    self.__create_char_tables()

  def __create_char_tables(self):
    self.client.execute('''create external table if not exists
        functional_parquet.chars_formats
        (cs CHAR(5), cl CHAR(140), vc VARCHAR(32))
        STORED AS PARQUET
        LOCATION "{0}"'''.format(get_fs_path("/test-warehouse/chars_formats_parquet")))
    self.client.execute('''create external table if not exists
        functional_orc_def.chars_formats
        (cs CHAR(5), cl CHAR(140), vc VARCHAR(32))
        STORED AS ORC
        LOCATION "{0}"'''.format(get_fs_path("/test-warehouse/chars_formats_orc_def")))
    self.client.execute('''create external table if not exists
        functional.chars_formats
        (cs CHAR(5), cl CHAR(140), vc VARCHAR(32))
        ROW FORMAT delimited fields terminated by ','  escaped by '\\\\'
        STORED AS TEXTFILE
        LOCATION "{0}"'''.format(get_fs_path("/test-warehouse/chars_formats_text")))
    self.client.execute('''create external table if not exists
        functional_avro_snap.chars_formats
        (cs CHAR(5), cl CHAR(140), vc VARCHAR(32))
        STORED AS AVRO
        LOCATION "{0}"
        TBLPROPERTIES ('avro.schema.literal'='{{"type":"record",
        "name":"CharTypesTest","doc":"Schema generated by Kite",
        "fields":[
        {{"name":"cs","type":["null","string"], "doc":"Type inferred"}},
        {{"name":"cl","type":["null","string"], "doc":"Type inferred"}},
        {{"name":"vc","type":["null","string"],"doc":"Type inferred"}}]}}')
        '''.format(get_fs_path("/test-warehouse/chars_formats_avro_snap")))

  @classmethod
  def add_test_dimensions(cls):
    super(TestCharFormats, cls).add_test_dimensions()
    cls.ImpalaTestMatrix.add_dimension(
      create_exec_option_dimension(disable_codegen_options=[False, True]))
    cls.ImpalaTestMatrix.add_constraint(lambda v:
        (v.get_value('table_format').file_format in ['avro'] and
        v.get_value('table_format').compression_codec in ['snap']) or
        v.get_value('table_format').file_format in ['parquet'] or
        v.get_value('table_format').file_format in ['orc'] or
        (v.get_value('table_format').file_format in ['text'] and
        v.get_value('table_format').compression_codec in ['none']))

  def test_char_format(self, vector):
    self.run_test_case('QueryTest/chars-formats', vector)
